module cpu_card(
	input wire VCC,
	input wire GND,
	input wire clk,				// generated by motherboard clock generator
	input wire rst_n,			// probably a button on the motherboard
	output reg we_n,			// active low
	output reg oe_n,			// active low
	inout wire [7:0] data,
	output reg [15:0] addr,	    // 64k address space is suppored by default. More address bits may be added later
	output wire int_n			// pulled up by motherboard; driven down by any peripheral (could be used for interrupts)
);

// details about shift card:
/*
always @(*) begin
    case (addr[10:8])
        // swap upper and lower of a
        3'b000: TO_BUFFER_DATA = {a[3:0], a[7:4]};

        // left logical shift a by 1
        3'b001: TO_BUFFER_DATA = a >> 1;

        // left circular shift a by 1
        3'b010: TO_BUFFER_DATA = {a[6:0], a[7]};

        // left arithmetic shift a by 1
        3'b011: TO_BUFFER_DATA = a >>> 1;

        // right logical shift a by 1
        3'b100: TO_BUFFER_DATA = a << 1;

        // right circular shift a by 1
        3'b101: TO_BUFFER_DATA = {a[0], a[7:1]};

        3'b110: TO_BUFFER_DATA = 8'bx;
        3'b111: TO_BUFFER_DATA = 8'bx;
        default: TO_BUFFER_DATA = 8'bx;
    endcase
end
*/


parameter alu_a = 8'b1111_1111;
parameter alu_b = 8'b0101;

reg [7:0] dat_o;

reg [7:0] dat;
assign data = dat;
// "cpu card"
initial begin
	dat = 8'bz;
	addr = 16'h0;
	we_n = 1'b1;
	oe_n = 1'b1;
	delay(5);

	// write/read to simple card
	write(8'd25, 16'h4000);
	read(dat_o, 16'h4000);
	$display("Read: %h", dat_o);

	// write/read to alu card
	write(8'd50, 16'h5001);
	read(dat_o, 16'h5001);
	$display("Read: %h", dat_o);

	delay(5);

	// write/read to shift card
	write(alu_a, 16'b1000_1_0_00_0000_0000);
	write(alu_b, 16'b1000_1_1_00_0000_0000);

	read(dat_o, 16'b1000_1_000_0000_0000);
	$display("Read: %h, expecting %h (swap upper and lower)", dat_o, {alu_a[3:0], alu_a[7:4]});

	read(dat_o, 16'b1000_1_001_0000_0000);
	$display("Read: %h, expecting %h (left logical shift)", dat_o, alu_a >> 1);

	read(dat_o, 16'b1000_1_010_0000_0000);
	$display("Read: %h, expecting %h (left circular shift)", dat_o, {alu_a[6:0], alu_a[7]});

	read(dat_o, 16'b1000_1_011_0000_0000);
	$display("Read: %h, expecting %h (left arithmetic shift)", dat_o, $signed(alu_a) >>> 1);

	read(dat_o, 16'b1000_1_100_0000_0000);
	$display("Read: %h, expecting %h (right logical shift)", dat_o, alu_a << 1);

	read(dat_o, 16'b1000_1_101_0000_0000);
	$display("Read: %h, expecting %h (right circular shift)", dat_o, {alu_a[0], alu_a[7:1]});

	addr = 16'h0;
	$finish;
end

task write(input reg [7:0] dat_i, input reg [15:0] addr_i); begin
	dat = dat_i;
	addr = addr_i;
	we_n = 1'b0;
	delay(1);
	we_n = 1'b1;
end endtask

task read(output reg [7:0] dat_o, input reg [15:0] addr_i); begin
	dat = 8'bz;
	addr = addr_i;
	oe_n = 1'b0;
	delay(1);
	dat_o = data;
	oe_n = 1'b1;
end endtask

task delay(input integer cycles);
	repeat(cycles) @(posedge clk);
endtask

endmodule